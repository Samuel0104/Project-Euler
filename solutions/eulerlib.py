from time import time

def isPal(string: str) -> bool: # 4
    """
    Tests if a string
    is a palindrome
    """
    return string == string[::-1]

def gcd(a: int, b: int) -> int: # 33
    """
    Returns the greatest common
    divisor of a and b
    """
    if a%b == 0:
        return abs(b)
    return gcd(b, a%b)

def lcm(a: int, b: int) -> int: # 5
    """
    Returns the lowest positive
    common multiple of a and b
    """
    return abs(a*b//gcd(a, b))

def isPrime(n: int) -> bool: # 7, 10, 27, 37
    """
    Tests if n is a
    prime number
    """
    if n == 2:
        return True
    if n < 2 or n%2 == 0:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n%i == 0:
            return False
    return True

def numDivisors(n: int) -> int: # 12
    """
    Returns the number of
    positive divisors of n
    """
    decomp = 1
    exp = 0
    while n%2 == 0:
        n /= 2
        exp += 1
    decomp *= exp + 1

    factor = 3
    while n > 1:
        exp = 0
        while n%factor == 0:
            n /= factor
            exp += 1
        decomp *= exp + 1
        factor += 2
    return decomp

def numCollatz(n: int) -> int: # 14
    """
    Returns the number of
    iterations of the Collatz
    sequence generated by n
    """
    it = 0
    while n > 1:
        if n%2 == 0:
            n = n//2
        else:
            n = 3*n + 1
        it += 1
    return it

def fact(n: int) -> int: # 24
    """
    Returns the
    factorial of n
    """
    prod = 1
    for i in range(2, n + 1):
        prod *= i
    return prod

def comb(n: int, k: int) -> int: # 15
    """
    Returns the number of
    k-combinations of a set
    with n elements, C(n, k)
    """
    return fact(n)//(fact(n - k)*fact(k))

def divisorSum(n: int, proper=True) -> int: # 21, 23
    """
    Returns the sum
    of divisors of n
    """
    if n == 1:
        return int(not proper)
    s = 1
    if not proper:
        s += n
    for factor in range(2, int(n**0.5) + 1):
        if n%factor == 0:
            s += factor
            if n/factor != factor:
                s += n//factor
    return s

def nextPrime(n: int) -> int: # 26
    """
    Returns the smallest
    prime larger than n
    """
    if n < 2:
        return 2
    if n == 2:
        return 3
    n += 2
    if isPrime(n):
        return n
    return nextPrime(n)

def isPandig(string: str) -> bool: # 32, 38
    """
    Tests if a string
    is 1-9 pandigital
    """
    return sorted(string) == list("123456789")

def numPyth(p: int) -> int: # 39
    """
    Returns the number of
    integer solutions for the
    sides of a right triangle
    with perimeter p
    """
    sols = 0
    for a in range(1, p//3):
        for b in range(a + 1, p//2):
            c = (a*a + b*b)**0.5
            if a + b + c == p:
                sols += 1
    return sols
